@using NoteWebApp.Models
@model NoteWebApp.ViewModels.NoteIndexVM

@{
    ViewBag.Title = "Index";

    List<Note> noteList = Model.NoteList;
    Note note = Model.SelectedNote;
    var order = ViewBag.order;

}

<style>
    .partViewList {
        margin-top: 15px;
        overflow-y: scroll;
        height: calc(100% - 120px);
        overflow-x: hidden;
    }

    #noteOrderBy {
        margin-bottom: 5px;
    }

    #pageTitle {
        color: #878787;
        display: block;
        vertical-align: top;
        font-size: 21px;
        letter-spacing: 0.5px;
        text-transform: uppercase;
        font-family: gotham, helvetica, arial, sans-serif;
        font-weight: 300;
        line-height: 26px;
        padding: 24px 20px 0 24px;
    }

    #countNotes, .alarm {
        font-family: gotham, helvetica, arial, sans-serif;
        font-size: 13px;
        font-weight: 400;
        color: #ababab;
        padding: 24px 20px 0 24px;
        display: inline-block;
    }

    .listConfig {
        margin-left: 150px;
        cursor: pointer;
        display: inline;
        font-family: gotham, helvetica, arial, sans-serif;
        font-size: 13px;
        font-weight: 400;
        color: #878787;
    }

    .select-hide {
        display: none;
    }

    .customOption {
        padding: 9px 54px 10px 20px;
        background-size: 12px 12px
    }

    .select-items {
        font-family: gotham, helvetica, arial, sans-serif;
        font-size: 13px;
        font-weight: 500;
        z-index: 100;
        background: #fff;
        border: 3px solid rgba(217, 217, 217, 0.4);
        border-top: 1px solid rgba(217, 217, 217, 0.4);
        border-left: 1px solid rgba(217, 217, 217, 0.4);
        box-shadow: 0px 6px 20px rgba(0, 0, 0, 0.04), -6px 8px 15px rgba(0, 0, 0, 0.04), 6px 8px 15px rgba(0, 0, 0, 0.04);
        padding: 12px 0;
        margin-top: 4px;
        color: #606060;
        position: fixed;
        box-sizing: border-box;
        margin-left: 100px;
    }

    .select-items div:hover, .same-as-selected {
        background-color: #2dbe60;
        color: #fff;
        padding: 9px 54px 10px 20px;
        background-size: 12px 12px
    }

    .configContainer {
        display: inline;
    }

    #noteDetail {
        width: calc(100% - 400px);
        height: 90%
    }

    .preview-container {
        width: 100%;
        overflow: hidden;
        padding: 0;
    }

    .listTitle {
        font-family: sans-serif;
        font-size: 18px;
        font-weight: 400;
    }

    #noteListDate {
        font-family: gotham, helvetica, arial, sans-serif;
        font-size: 11px;
        font-weight: 400;
        letter-spacing: 1px;
        margin-bottom: 8px;
    }

    .preContents {
        font-family: gotham, helvetica, arial, sans-serif;
        font-size: 12px;
        font-weight: 400;
        line-height: 10px;
        height: 50px;
        overflow: hidden;
    }

    .alarm {
        border-top: 3px solid rgb(225, 222, 222);
        border-bottom: 3px solid rgb(225, 222, 222);
        display: block;
        padding: 10px 10px 10px 28px;
        margin-top: 0px;
    }

    #noteListTable tr th:hover {
        background-color: #2dbe60;
        color: #fff;
    }

    #noteListTable tr th {
        width: 100%;
        text-align: left;
        border-bottom: 1px solid rgb(225, 222, 222);
        padding-left: 20px;
        padding-top: 7px;
        height: 50px;
        color: #707070
    }
    #noteOrderForm{
        display:none;
    }
</style>


<div class="noteList">

    <div id="pageTitle">노트</div>
    <div id="countNotes">@noteList.Count 개의 노트</div>


    <div class="configContainer"></div>
    <div id="noteOrderBy">
        @using (Html.BeginForm("Index", "Note", FormMethod.Get, new { id = "noteOrderForm" }))
        {
            @Html.DropDownList("orderColumn", new SelectListItem[]{

            new SelectListItem() { Text = "만든날짜(최근 순으로)", Value = "Notedate" },
            new SelectListItem() { Text = "만든날짜(오래된 순으로)", Value =  "Notedate"},
            new SelectListItem() { Text = "제목(내림차순)", Value = "Title"},
            new SelectListItem() { Text = "제목(오름차순)", Value = "Title"}
           }, new { onchange = " orderSubmit();" } )

            @Html.Hidden("orderType", "",  new { id = "orderType" })
        }
    </div>

    <div class="partViewList">
        @{ Html.RenderPartial("ShowNoteList", noteList); } 
    </div>

</div>



<div id="noteDetail">
    @{ Html.RenderAction("Detail", new { selectedNoteid = noteList[0].NoteId }); }
</div>



<script>

    function orderSubmit() {
        var descorasc = "Asc"
        document.getElementById("orderType").value = descorasc;
        this.submit();
    }
</script>

<script>

////드롭다운 커스터마이징
////[1] 오리지널 드롭다운에서 이미 선택된 값을 보여주는 엘리먼트를 만든다.

////1. 오리지널 드롭다운을 찾기
////2. 오리지널 옵션을 따옴
////3. 오리지널 드롭다운 아래에 child로 selected value를 넣음.


var originListOrder = document.getElementById("noteOrderBy"); //원본 드롭다운
var originSelect = originListOrder.getElementsByTagName("select")[0]; //원본의 옵션을넣음
var originContainer = document.getElementsByClassName("configContainer")[0];

var listConfig = document.createElement("DIV"); //새로운 엘리먼트를 만듬
listConfig.setAttribute("class", "listConfig"); // 드롭다운을 보여줄 버튼을 만듬
listConfig.innerHTML = "설정 ∨";
//새로운 엘리먼트를 원본 자식으로 넣음.
originContainer.appendChild(listConfig);

//[2] 다른 옵션 값을 넣어준다.

//1. 옵션들을 감싸줄 container를 만들되, 사용하지않을 땐 숨겨야하므로 숨길수 있는 클래스도 넣는다.
var optionContainer = document.createElement("DIV");
optionContainer.setAttribute("class", "select-items select-hide");

////2. container에 다른 옵션들을 넣어준다.
for (i = 0; i < originSelect.length; i++) {
    var customOption = document.createElement("DIV");
    customOption.setAttribute("class", "customOption");
    customOption.innerHTML = originSelect[i].innerHTML;
    optionContainer.appendChild(customOption);
    customOption.addEventListener("click", function (e) {

        for (j = 0; j < originSelect.length; j++) {
            if (this.innerHTML == originSelect[j].innerHTML) {//선택한 옵션의 내용으로 원본의 해당 인덱스를 찾아서
                originSelect.options[j].selected = true;
                //리스트 순서를 바꾸는 로직
                $("#noteOrderForm").submit();
                y = this.parentNode.getElementsByClassName("same-as-selected");
                for (k = 0; k < y.length; k++) {
                    y[k].classList.remove("same-as-selected");
                }
                this.setAttribute("class", "customOption same-as-selected");
                break;
            };
        };
    });
 };


//4. container를 원본 드롭다운의 자식으로 넣는다.
originContainer.appendChild(optionContainer);

//다른곳클릭하면 닫는 메소드
document.addEventListener("click", function (e) {
    e = e || window.event;
    var target = e.target || e.srcElement;
    if (target == listConfig) {
        optionContainer.classList.toggle("select-hide");
    } else {
        optionContainer.classList.add("select-hide");
    }
})
</script>